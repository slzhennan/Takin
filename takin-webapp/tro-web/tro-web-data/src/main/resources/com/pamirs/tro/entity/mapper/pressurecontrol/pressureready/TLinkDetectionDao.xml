<?xml version="1.0" encoding="utf-8" ?>
<!--
  ~ Copyright 2021 Shulie Technology, Co.Ltd
  ~ Email: shulie@shulie.io
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.pamirs.tro.entity.dao.pressureready.TLinkDetectionDao">

    <!-- 新增链路时需要插入链路检测表 -->
    <insert id="insertLinkDetection" parameterType="Map">
        INSERT INTO t_link_detection (LINK_DETECTION_ID,
                                      APPLICATION_ID,
                                      CREATE_TIME,
                                      UPDATE_TIME)
        values (#{linkDetectionId},
                #{applicationId},
                now(),
                now())
    </insert>

    <!-- 批量更新链路检测表的链路信息 -->
    <update id="updateLinkDetection" parameterType="List">
        <foreach separator=";" index="index" item="linkDetectionInfo"
                 collection="linkDetectionInfoLists" close="" open="">
            update
            t_link_detection
            set
            LINK_ID=#{linkDetectionInfo.linkId},
            LINK_NAME=#{linkDetectionInfo.linkName},
            INTERFACE_NAME=#{linkDetectionInfo.interfaceName}
            where
            APPLICATION_ID=#{linkDetectionInfo.applicationId}
        </foreach>
    </update>

    <!-- 查询压测检测接口(包含异常检测) -->
    <select id="queryChecklist" parameterType="Map"
            resultType="com.pamirs.tro.entity.domain.vo.TLinkDetection">
        SELECT
        tslm.LINK_NAME SECOND_LINK_NAME,
        tslm.LINK_ID SECOND_LINK_ID,
        tlm.LINK_ID,
        tlm.LINK_NAME,
        tlm.PRINCIPAL_NO,
        tld.APPLICATION_ID,
        tam.APPLICATION_NAME,
        tam.APPLICATION_DESC,
        tld.LINK_DETECTION_ID,
        tld.SHADOWLIB_CHECK,
        tld.SHADOWLIB_ERROR,
        tld.CACHE_CHECK,
        tld.CACHE_ERROR,
        tld.WLIST_CHECK,
        tld.WLIST_ERROR,
        tld.CREATE_TIME,
        tld.UPDATE_TIME
        FROM
        t_link_detection tld,
        t_link_mnt tlm,
        t_white_list twl,
        t_application_mnt tam,
        t_link_service_mnt tlsm,
        t_second_link_mnt tslm,
        t_second_basic tsb
        where
        tld.APPLICATION_ID=twl.APPLICATION_ID
        and
        tlm.LINK_ID = tlsm.LINK_ID
        AND twl.INTERFACE_NAME = tlsm.INTERFACE_NAME
        and tam.APPLICATION_ID=tld.APPLICATION_ID
        and tsb.SECOND_LINK_ID=tslm.LINK_ID
        and tsb.BASIC_LINK_ID=tlm.LINK_ID
        <if test="secondLinkId!=null and secondLinkId!=''">
            and tslm.LINK_ID = #{secondLinkId}
        </if>
        <if test="secondLinkName!=null and secondLinkName!=''">
            and tslm.LINK_NAME like concat('%',#{secondLinkName},'%')
        </if>
        <if test="linkName!=null and linkName!=''">
            and tlm.LINK_NAME like concat('%',#{linkName},'%')
        </if>
        <if test="applicationName!=null and applicationName!=''">
            and tam.APPLICATION_NAME like
            concat('%',#{applicationName},'%')
        </if>
        <if test="principalNo!=null and principalNo!=''">
            and tlm.PRINCIPAL_NO=#{principalNo}
        </if>
        <if test="status!=null and status=='2'.toString()">
            and tld.SHADOWLIB_CHECK='2'
            and tld.CACHE_CHECK='2'
            and tld.WLIST_CHECK='2'
        </if>
        <if test="status!=null and status=='3'.toString()">
            and (tld.SHADOWLIB_CHECK='3'
            or tld.CACHE_CHECK='3'
            or tld.WLIST_CHECK='3')
        </if>
        GROUP BY tslm.LINK_ID,tlm.LINK_ID,tld.APPLICATION_ID
        order by tslm.LINK_NAME desc
    </select>

    <!-- 根据应用id查询服务名称和类型 -->
    <select id="queryWLisByApplicationId" parameterType="String"
            resultType="Map">
        SELECT tam.APPLICATION_NAME applicationName,
               twl.INTERFACE_NAME   interfaceName,
               twl.TYPE             type,
               t.VALUE_NAME         typeName
        FROM t_application_mnt tam,
             t_white_list twl,
             (
                 SELECT tdt.ID,
                        twl.WLIST_ID,
                        tdd.VALUE_ORDER,
                        tdd.VALUE_NAME,
                        tdt.TYPE_NAME
                 FROM t_dictionary_type tdt,
                      t_dictionary_data tdd,
                      t_white_list twl
                 WHERE tdt.ID = tdd.DICT_TYPE
                   AND twl.DICT_TYPE = tdt.ID
                   AND twl.type = tdd.value_order
             ) t
        WHERE twl.WLIST_ID = t.WLIST_ID
          AND twl.DICT_TYPE = t.ID
          AND twl.type = t.value_order
          AND twl.APPLICATION_ID = tam.APPLICATION_ID
          AND tam.APPLICATION_ID = #{applicationId}
    </select>

    <!-- 更新影子库整体同步检测状态 -->
    <update id="updateShadowLibResult" parameterType="String">
        update
        t_link_detection
        set
        <choose>
            <when test="shadowLibErrorContent!=null and shadowLibErrorContent!=''">
                SHADOWLIB_ERROR=#{shadowLibErrorContent},
            </when>
            <otherwise>
                SHADOWLIB_ERROR=null,
            </otherwise>
        </choose>
        SHADOWLIB_CHECK=#{shadowLibResultStatus},
        UPDATE_TIME=now()
        where
        APPLICATION_ID=#{applicationId}
    </update>

    <!-- 白名单检测异常更新异常内容 -->
    <update id="updateWlistErrorContent" parameterType="String">
        update
        t_link_detection
        set
        <choose>
            <when test="wlistErrorContent!=null and wlistErrorContent!=''">
                WLIST_ERROR=#{wlistErrorContent},
            </when>
            <otherwise>
                WLIST_ERROR=null,
            </otherwise>
        </choose>
        WLIST_CHECK=#{wlistResultStatus},
        UPDATE_TIME=now()
        where
        APPLICATION_ID=#{applicationId}
    </update>

    <!-- 更新缓存预热状态 -->
    <update id="updateCacheResult" parameterType="String">
        update
        t_link_detection
        set
        <choose>
            <when test="cacheErrorContent!=null and cacheErrorContent!=''">
                CACHE_ERROR=#{cacheErrorContent},
            </when>
            <otherwise>
                CACHE_ERROR=null,
            </otherwise>
        </choose>
        CACHE_CHECK=#{cacheResultStatus},
        UPDATE_TIME=now()
        where
        APPLICATION_ID=#{applicationId}
    </update>

    <!-- 根据应用ID批量删除链路检测信息 -->
    <delete id="deleteApplicationToLinkDetection" parameterType="List">
        delete from t_link_detection where APPLICATION_ID in
        <foreach collection="applicationIdLists" separator=","
                 item="applicationId" open="(" close=")">
            #{applicationId}
        </foreach>
    </delete>

    <!--根据应用id列表批量查询数据检测信息-->
    <select id="queryLinkDetectionListByIds" parameterType="list" resultType="java.util.Map">
        SELECT
        t1.*
        FROM
        t_link_detection t1
        WHERE
        t1.APPLICATION_ID IN
        <foreach collection="applicationIds" item="applicationId" open="(" close=")" separator=",">
            #{applicationId}
        </foreach>
        ORDER BY t1.APPLICATION_ID
    </select>


    <!-- 根据应用id查询校压测检测结果 -->
    <select id="pressureTestCheck" resultType="Map">
        select SHADOWLIB_CHECK,
               CACHE_CHECK,
               WLIST_CHECK
        from t_link_detection
        where APPLICATION_ID = #{applicationId}
    </select>

    <!--根据基础链路名称查询压测检测结果-->
    <select id="queryPMCheckByBasicLinkName" parameterType="String"
            resultType="com.pamirs.tro.entity.domain.vo.BasicLinkApplicationDetection">
        SELECT tlm.LINK_ID,
               tlm.LINK_NAME,
               tam.APPLICATION_ID,
               tam.APPLICATION_NAME,
               tld.SHADOWLIB_CHECK,
               tld.CACHE_CHECK,
               tld.WLIST_CHECK,
               tld.UPDATE_TIME
        FROM t_link_detection tld,
             t_link_mnt tlm,
             t_white_list twl,
             t_application_mnt tam,
             t_link_service_mnt tlsm
        where tld.APPLICATION_ID = twl.APPLICATION_ID
          and tlm.LINK_ID = tlsm.LINK_ID
          AND twl.INTERFACE_NAME = tlsm.INTERFACE_NAME
          and tam.APPLICATION_ID = tld.APPLICATION_ID
          and tlm.LINK_ID = #{linkId}
        GROUP BY tlm.LINK_ID, tld.APPLICATION_ID
    </select>


    <!--压测检测调试开关-->
    <update id="debugSwitchUpdateByCheck" parameterType="Map">
        update
        t_link_detection
        SET
        SHADOWLIB_CHECK=#{status},
        CACHE_CHECK=#{status},
        UPDATE_TIME=NOW()
        where APPLICATION_ID in
        <foreach collection="applicationIdLists" separator=","
                 item="applicationId" open="(" close=")">
            #{applicationId}
        </foreach>
    </update>
</mapper>
